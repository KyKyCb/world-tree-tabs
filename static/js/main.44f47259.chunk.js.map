{"version":3,"sources":["services/dataFetchService.js","config.js","redux/actions/actionTypes.js","redux/actions/dataAction.js","utils/dataGenerator/dataGenerator.js","utils/useCollapseChildren/useCollapseChildren.js","components/Button/Button.js","components/Form/Form.js","components/TreeChild/TreeChild.js","components/TreeBranch/TreeMainBranch.js","components/Tree/Tree.js","components/App.js","redux/actions/generateAction.js","redux/actions/switchDataAction.js","redux/reducers/dataReducer.js","redux/reducers/generationReducer.js","redux/reducers/switchDataReducer.js","store.js","index.js"],"names":["WorldData","params","fetch","method","headers","body","JSON","stringify","query","result","ok","Error","json","this","fetchData","continentCode","SET_ALL_CONTINENTS","SET_ALL_COUNTRIES_BY_CONTINENT","ERROR","DATA_LOADING","SWITCH_DATA_TYPE","SET_GLOBAL_PARAMS","RESET_GLOBAL_PARAMS","SET_GENERATED_DATA","allCountries","countries","type","payload","asyncChangeData","id","toast","loading","dispatch","a","getAllCountriesByContinent","setTimeout","data","update","render","isLoading","autoClose","getAllContinents","continents","err","message","console","error","dataGenerator","treeDepth","branchQuantity","depthGenerator","incomingDepth","k","push","name","useCollapseChildren","useState","isShow","setIsShow","Button","props","onClick","className","Form","depth","nodes","state","setState","onSubmit","onChangeHandler","event","value","parseInt","target","trim","onChange","TreeChild","treeData","setData","handleStatus","useEffect","key","Array","isArray","length","TransitionGroup","map","children","indx","CSSTransition","timeout","classNames","CollapseBranch","Consumer","React","createContext","TreeMainBranch","useDispatch","renderType","useSelector","isWorld","Provider","code","in","Tree","worldData","genData","App","onClickHandler","globalDepth","globalQuantity","toastId","generateDataAction","globalParams","position","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","initialState","dataReducer","action","newState","continent","generationReducer","switchDataReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44f47259.chunk.js","sourcesContent":["import { API_URL } from \"../config\"\r\n\r\nclass WorldData {\r\n    static async fetchData(params){\r\n        try {\r\n            const result = await fetch(API_URL, {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    query: params\r\n                })\r\n            })\r\n\r\n            if(!result.ok){\r\n                throw new Error('Something went wrong. Try again later')\r\n            }\r\n\r\n            return result.json()\r\n\r\n        } catch (error) {\r\n            throw new Error('Something went wrong. Try again later')\r\n        }\r\n    }\r\n\r\n    static async getAllContinents (){\r\n        const query = '{continents{name code}}'\r\n        return await this.fetchData(query)\r\n    }\r\n\r\n    static async getAllCountriesByContinent (continentCode){\r\n        const query=`{\r\n                countries (filter: {continent: {eq: \"${continentCode}\"}}){\r\n                    name\r\n                    code\r\n                    languages{\r\n                        name\r\n                    }\r\n                }\r\n           }`\r\n        return await this.fetchData(query)\r\n    }\r\n}\r\n\r\nexport default WorldData","export const API_URL = 'https://countries.trevorblades.com/'","export const SET_ALL_CONTINENTS = 'SET_ALL_CONTINENTS'\r\nexport const SET_ALL_COUNTRIES_BY_CONTINENT = 'SET_ALL_COUNTRIES_BY_CONTINENT'\r\nexport const ERROR = 'ERROR'\r\nexport const DATA_LOADING = 'DATA_LOADING'\r\n\r\n\r\nexport const SWITCH_DATA_TYPE = 'SWITCH_DATA_TYPE'\r\n\r\nexport const SET_GLOBAL_PARAMS = 'SET_GLOBAL_PARAMS'\r\nexport const RESET_GLOBAL_PARAMS = 'RESET_GLOBAL_PARAMS'\r\nexport const SET_GENERATED_DATA = 'SET_GENERATED_DATA'","import { toast } from \"react-toastify\";\r\nimport WorldData from \"../../services/dataFetchService\";\r\nimport { \r\n    SET_ALL_COUNTRIES_BY_CONTINENT, \r\n    SET_ALL_CONTINENTS, \r\n    ERROR,\r\n    DATA_LOADING\r\n} from \"./actionTypes\";\r\n\r\nconst allContinents = (data)=>{\r\n    return {type: SET_ALL_CONTINENTS, payload: data}\r\n}\r\n\r\nconst allCountries = (countries, continentCode)=>{\r\n    return {type: SET_ALL_COUNTRIES_BY_CONTINENT, payload: {countries, continentCode}}\r\n}\r\n\r\nconst dataLoading = ()=>{\r\n    return {type: DATA_LOADING}\r\n}\r\n\r\nconst sendError = (err)=>{\r\n    return {type: ERROR, payload: err}\r\n}\r\n\r\nconst asyncChangeData = (continentCode) =>{\r\n\r\n    const id = toast.loading('Waiting data...')\r\n    \r\n    return async(dispatch)=>{\r\n        try {\r\n\r\n\r\n            dispatch(dataLoading())\r\n\r\n            if(continentCode){\r\n                const countries = await WorldData.getAllCountriesByContinent(continentCode)\r\n                setTimeout(()=>{\r\n                    dispatch(allCountries(countries.data.countries, continentCode))\r\n                    toast.update(id, { render: \"All is good\", type: \"success\", isLoading: false, autoClose: 1000 })\r\n                }, 500)\r\n                \r\n                \r\n\r\n                return\r\n            }\r\n\r\n            const continents = await WorldData.getAllContinents()\r\n            setTimeout(()=>{\r\n                dispatch(allContinents(continents.data.continents))\r\n                toast.update(id, { render: \"All is good\", type: \"success\", isLoading: false, autoClose: 1000 })\r\n            }, 500)\r\n\r\n            \r\n\r\n        } catch (error) {\r\n            toast.update(id, { render: \"Whoops! Something went wrong!\", type: \"error\", isLoading: false, autoClose: 1000 })\r\n            dispatch(sendError({type: 'error', message: `${error}`}))\r\n            console.error(error)\r\n        }\r\n    }\r\n}\r\n\r\nexport default asyncChangeData","\r\n\r\nconst dataGenerator = (treeDepth = 0, branchQuantity = 0)=>{\r\n\r\n    const depthGenerator = (incomingDepth)=>{\r\n        const data = []\r\n        \r\n        if(incomingDepth < treeDepth){\r\n            for(let k = 0; k<branchQuantity; k++){\r\n                data.push({name: `child at lvl: ${incomingDepth+1}`, data: depthGenerator(incomingDepth+1)})\r\n            }\r\n        }\r\n        \r\n        return data\r\n    }\r\n\r\n    return depthGenerator(0)\r\n}\r\n\r\nexport default dataGenerator //not optimized for step by step generate","import { useState } from \"react\"\r\n\r\nconst useCollapseChildren = ()=>{\r\n    const [isShow, setIsShow] = useState(false)\r\n\r\n    const handleStatus = ()=>{\r\n        setIsShow(!isShow)\r\n    }\r\n\r\n    return [isShow, handleStatus]\r\n}\r\n\r\nexport default useCollapseChildren","import './Button.css'\r\n\r\nconst Button = (props)=>{\r\n    const {name, onClick, className} = props\r\n\r\n    const onClickHandler = ()=>{\r\n        onClick()\r\n    }\r\n\r\n    return(\r\n        <div className={\"button__container\" + (className ? (\" \" + className ): '') } onClick={onClickHandler}>\r\n            <p className={\"button__text\"}>{name}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button","import { useState } from 'react'\r\nimport Button from '../Button/Button'\r\nimport './Form.css'\r\n\r\nconst Form = (props)=>{\r\n\r\n    const [state, setState] = useState({depth: 1, nodes: 1})\r\n\r\n    const {onSubmit} = props\r\n\r\n    const onChangeHandler = (event)=>{\r\n        let value = parseInt(event.target.value.trim())\r\n\r\n        if(value <= 0 || !value){\r\n            value = 1\r\n        }\r\n\r\n        switch(event.target.name){\r\n            case 'depth':\r\n                setState({...state, depth: value})\r\n                break\r\n            case 'nodes':\r\n                setState({...state, nodes: value})\r\n                break\r\n            default:\r\n                return\r\n        }\r\n    }\r\n\r\n    const onSubmitHandler = ()=>{\r\n        onSubmit(state)\r\n    }\r\n\r\n    return(\r\n        <form className=\"form\">\r\n\r\n            <label className=\"form__label\">\r\n                <span className=\"label__text\">Depth</span>\r\n                <input \r\n                    type=\"number\"\r\n                    name='depth'\r\n                    value={state.depth}\r\n                    onChange={onChangeHandler}\r\n                />\r\n            </label>\r\n\r\n            <label className=\"form__label\">\r\n                <span className=\"label__text\">Number of nodes</span>\r\n                <input \r\n                    type=\"number\"\r\n                    name='nodes'\r\n                    value={state.nodes}\r\n                    onChange={onChangeHandler}\r\n                />\r\n            </label>\r\n\r\n            <Button\r\n                className=\"form__button\"\r\n                name=\"apply\"\r\n                onClick={onSubmitHandler}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form","import { useEffect, useState } from \"react\"\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\"\r\nimport useCollapseChildren from \"../../utils/useCollapseChildren/useCollapseChildren\"\r\nimport Button from \"../Button/Button\"\r\nimport { CollapseBranch } from \"../TreeBranch/TreeMainBranch\"\r\n\r\nimport './TreeChild.css'\r\n\r\nconst TreeChild = (props)=>{\r\n    const {treeData} = props\r\n\r\n    const [data, setData] = useState([])\r\n\r\n    const [isShow, handleStatus] = useCollapseChildren()\r\n\r\n    const onClickHandler = ()=>{\r\n        if(data.length){\r\n            handleStatus()\r\n            return\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{        \r\n        for (let key in treeData){\r\n            if(Array.isArray(treeData[key])){\r\n                setData(treeData[key])\r\n            }\r\n        }\r\n    }, [props])\r\n\r\n    if(!data.length){\r\n        return(\r\n            <CollapseBranch.Consumer>\r\n                {   \r\n                    (value) => {\r\n                        return (\r\n                            <div className=\"tree-child__container\">\r\n                                <Button\r\n                                    onClick={value}\r\n                                    name={treeData.name}\r\n                                    className=\"last-child\"\r\n                                />\r\n                            </div>\r\n                        )\r\n                    }\r\n                }\r\n            </CollapseBranch.Consumer>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div className=\"tree-child__container\">\r\n            <Button\r\n                onClick={onClickHandler}\r\n                name={treeData.name}\r\n            />\r\n            \r\n            <TransitionGroup>\r\n                {isShow &&\r\n                    data.map((children, indx) => {\r\n                        return(\r\n                            <CSSTransition\r\n                                key={treeData.name + indx}\r\n                                timeout={500}\r\n                                classNames='child-leave'\r\n                            >\r\n                                <div className='css-transition'>\r\n                                    <TreeChild\r\n                                        treeData={children}\r\n                                    />\r\n                                </div>\r\n                                \r\n                            </CSSTransition>\r\n                        )\r\n                    })\r\n                }\r\n            </TransitionGroup>\r\n\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default TreeChild","import React, { useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\n\r\nimport { CSSTransition } from \"react-transition-group\"\r\n\r\nimport asyncChangeData from \"../../redux/actions/dataAction\"\r\nimport useCollapseChildren from \"../../utils/useCollapseChildren/useCollapseChildren\"\r\nimport Button from \"../Button/Button\"\r\nimport TreeChild from \"../TreeChild/TreeChild\"\r\n\r\nimport './TreeMainBranch.css'\r\n\r\nexport const CollapseBranch = React.createContext()\r\n\r\nconst TreeMainBranch = (props)=>{\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const renderType = useSelector( state => state.renderType.isWorld)\r\n\r\n    const [data, setData] = useState([])\r\n\r\n    const [isShow, handleStatus] = useCollapseChildren()\r\n\r\n    const onClickHandler = ()=>{\r\n\r\n        if(!data.length && !isShow && renderType){\r\n            dispatch(asyncChangeData(props.treeData.code))\r\n        }\r\n\r\n        handleStatus()\r\n    }\r\n\r\n    useEffect(()=>{\r\n           \r\n        for (let key in props.treeData){\r\n            if(Array.isArray(props.treeData[key])){   \r\n                setData(props.treeData[key])\r\n            }\r\n        }\r\n\r\n    }, [props])\r\n\r\n    return(\r\n        <CollapseBranch.Provider value={handleStatus}>\r\n\r\n            <div className=\"main-branch__container\">\r\n                <Button\r\n                    onClick={onClickHandler}\r\n                    name={props.treeData.name}\r\n                />\r\n                <CSSTransition in={isShow} timeout={500} className='leaves'>\r\n                    <div>\r\n                            {data.map((children, indx) => {\r\n                                return(\r\n                                        <TreeChild\r\n                                            key={props.treeData.name + indx}\r\n\r\n                                            treeData={children}\r\n                                        />\r\n                                )\r\n                            })}\r\n                    </div>\r\n                </CSSTransition>\r\n\r\n            </div>\r\n\r\n        </CollapseBranch.Provider>\r\n    )\r\n}\r\n\r\n\r\nexport default TreeMainBranch","\r\nimport { useSelector } from \"react-redux\"\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\"\r\nimport TreeMainBranch from \"../TreeBranch/TreeMainBranch\"\r\n\r\nimport './Tree.css'\r\n\r\nconst Tree = (props)=>{\r\n\r\n    const continents = useSelector(state => state.worldData.continents)\r\n    const genData = useSelector(state => state.genData.data)\r\n    \r\n    const renderType = useSelector( state => state.renderType.isWorld)\r\n\r\n    if(renderType){\r\n        return(\r\n            <div className=\"tree__container\">\r\n\r\n                <TransitionGroup>\r\n                    {props.isShow &&\r\n                        continents.map((data, indx) => {\r\n                            return (\r\n                                <CSSTransition key={indx} timeout={500} classNames=\"branches\">\r\n                                    <TreeMainBranch\r\n                                        treeData={data}\r\n                                    />\r\n                                </CSSTransition>\r\n                            )\r\n                        })\r\n                    }\r\n                </TransitionGroup>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return ( \r\n        <div className=\"tree__container\">\r\n\r\n            <TransitionGroup>\r\n                    {props.isShow &&\r\n                        genData.map((data, indx) => {\r\n                            return (\r\n                                <CSSTransition key={indx} timeout={500} classNames=\"branches\">\r\n                                    <TreeMainBranch\r\n                                        treeData={data}\r\n                                    />\r\n                                </CSSTransition>\r\n                            )\r\n                        })\r\n                    }\r\n            </TransitionGroup>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tree","\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport asyncChangeData from '../redux/actions/dataAction';\r\nimport { generateDataAction, globalParams } from '../redux/actions/generateAction';\r\nimport { switchDataType } from '../redux/actions/switchDataAction';\r\nimport useCollapseChildren from '../utils/useCollapseChildren/useCollapseChildren';\r\n\r\nimport './App.css';\r\n\r\nimport Button from './Button/Button';\r\nimport Form from './Form/Form';\r\nimport Tree from './Tree/Tree';\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n\r\n    const worldData = useSelector( state => state.worldData )\r\n    const genData = useSelector( state => state.genData )\r\n    const renderType = useSelector( state => state.renderType.isWorld)\r\n\r\n    const [isShow, handleStatus] = useCollapseChildren()\r\n\r\n    const onClickHandler = ()=>{\r\n\r\n        if(!worldData.continents.length && !isShow && renderType){\r\n            dispatch(asyncChangeData())\r\n\r\n        }\r\n        if(!renderType && !genData.data.length && !isShow){\r\n            dispatch(generateDataAction(genData.depth, genData.nodes))\r\n        }\r\n\r\n        handleStatus()\r\n    }\r\n\r\n    const changeRenderType = ()=>{\r\n        dispatch(switchDataType())\r\n        if(isShow){\r\n            handleStatus()\r\n        }\r\n    }\r\n\r\n    const onSubmitForm = (params)=>{\r\n        dispatch(globalParams(params))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            \r\n            <CSSTransition in={!renderType} timeout={500} className=\"form-transition\">\r\n                <div className='app__form-container'>\r\n                    <Form\r\n                        onSubmit={onSubmitForm}\r\n                    />\r\n                </div>\r\n            </CSSTransition>\r\n            \r\n            <div className=\"app__switcher-container\">\r\n                <div>\r\n                    {renderType ?\r\n                        <Button\r\n                            name={'world'}\r\n                            onClick={onClickHandler}\r\n                        />\r\n                        :\r\n                        <Button\r\n                            name={'Generated data'}\r\n                            onClick={onClickHandler}\r\n                        />\r\n                    }\r\n\r\n                    <Tree\r\n                        isShow = {isShow}\r\n                    />\r\n                </div>\r\n\r\n                <Button\r\n                    name={renderType ? 'Switch to generate data' : 'Switch to world data'}\r\n                    onClick={changeRenderType}\r\n                />\r\n            </div>\r\n\r\n            <ToastContainer\r\n                position=\"top-center\"\r\n                autoClose={1000}\r\n                hideProgressBar ={false}\r\n                newestOnTop={false}\r\n                closeOnClick ={true}\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover\r\n            />\r\n\r\n            {worldData.isLoading && <div id={'overlay'}></div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { toast } from \"react-toastify\";\r\nimport dataGenerator from \"../../utils/dataGenerator/dataGenerator\";\r\nimport {\r\n    RESET_GLOBAL_PARAMS,\r\n    SET_GENERATED_DATA,\r\n    SET_GLOBAL_PARAMS\r\n} from \"./actionTypes\";\r\n\r\nexport const globalParams = (params)=>{\r\n    return {type: SET_GLOBAL_PARAMS, payload: params}\r\n}\r\n\r\nexport const resetParams = ()=>{\r\n    return {type: RESET_GLOBAL_PARAMS}\r\n}\r\n\r\nexport const generateDataAction = (globalDepth, globalQuantity)=>{\r\n\r\n    const toastId = toast.loading('Waiting data...')\r\n    \r\n    const data = dataGenerator(globalDepth, globalQuantity)\r\n\r\n    toast.update(toastId, {render: 'All good!', type: \"success\", isLoading: false, autoClose: 1000})\r\n\r\n    return {type: SET_GENERATED_DATA, payload: data}\r\n}\r\n","import { SWITCH_DATA_TYPE } from \"./actionTypes\"\r\n\r\nexport const switchDataType = ()=>{\r\n    return {type: SWITCH_DATA_TYPE}\r\n}","import { DATA_LOADING, ERROR, SET_ALL_CONTINENTS, SET_ALL_COUNTRIES_BY_CONTINENT } from \"../actions/actionTypes\"\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n\r\n    continents: [],\r\n    \r\n    error: null\r\n}\r\n\r\nconst dataReducer = (state = initialState, action)=>{\r\n    switch(action.type){\r\n        case SET_ALL_CONTINENTS:\r\n            return {...state, continents: action.payload, isLoading: false}\r\n\r\n        case SET_ALL_COUNTRIES_BY_CONTINENT:\r\n            const newState = {...state}\r\n\r\n            newState.continents = state.continents.map( continent => {\r\n\r\n                if(continent.code === action.payload.continentCode){\r\n                    continent.countries = action.payload.countries\r\n                    return continent\r\n                }\r\n\r\n                return continent\r\n            })\r\n            newState.isLoading = false\r\n            return newState\r\n\r\n        case DATA_LOADING:\r\n            return {...state, isLoading: true}\r\n\r\n        case ERROR:\r\n            return {...state, error: action.payload, isLoading: false}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default dataReducer","import { RESET_GLOBAL_PARAMS, SET_GENERATED_DATA, SET_GLOBAL_PARAMS } from \"../actions/actionTypes\"\r\n\r\nconst initialState = {\r\n    depth: 1,\r\n    nodes: 1,\r\n\r\n    data: [],\r\n}\r\n\r\nconst generationReducer = (state = initialState, action)=>{\r\n    switch(action.type){\r\n        case SET_GLOBAL_PARAMS:\r\n            return {...state, depth: action.payload.depth, nodes: action.payload.nodes, data: []}\r\n        case RESET_GLOBAL_PARAMS:\r\n            return initialState\r\n        case SET_GENERATED_DATA:\r\n            return {...state, data: action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default generationReducer","import { SWITCH_DATA_TYPE } from \"../actions/actionTypes\"\r\n\r\nconst initialState = {\r\n    isWorld: true\r\n}\r\n\r\nconst switchDataReducer = (state = initialState, action)=>{\r\n    switch(action.type){\r\n        case SWITCH_DATA_TYPE:\r\n            return {...state, isWorld: !state.isWorld}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default switchDataReducer","\r\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport dataReducer from \"./redux/reducers/dataReducer\";\r\nimport generationReducer from \"./redux/reducers/generationReducer\";\r\nimport switchDataReducer from \"./redux/reducers/switchDataReducer\";\r\n\r\nconst rootReducer = combineReducers({worldData: dataReducer, genData: generationReducer, renderType: switchDataReducer})\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\r\n\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './components/App';\r\nimport store from './store';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}